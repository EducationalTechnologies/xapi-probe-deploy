apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: {{ .Release.Namespace }}
  labels:
    app: {{ .Release.Name }}
    microservice: backend
    component: database
  annotations:
    helm.sh/chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10

  selector:
    matchLabels:
      app: {{ .Release.Name }}
      microservice: backend
      component: database
 
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate

  template:
    metadata:
      labels:
        app: {{ .Release.Name }}
        microservice: backend
        component: database

    spec:  # type: V1PodSpec
      containers:
      - name: postgres
        
        image: yeldir/st3k101-postgres
        imagePullPolicy: Always

        stdin: true
        tty: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File

        env:
        - name: POSTGRES_DB
          value: {{ .Values.backend.database.name }}  
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_PASSWORD
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: postgres-credentials
              key: POSTGRES_USER

        volumeMounts:
        - mountPath: /var/lib/postgresql/data
          name: postgres-data

      dnsPolicy: ClusterFirst

      restartPolicy: always
      terminationGracePeriodSeconds: 60

      volumes:
      - name: postgres-data
        persistentVolumeClaim:
          claimName: postgres-data
